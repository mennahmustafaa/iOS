struct ContentView: View {
    @State private var tapCount = 0

    var body: some View {
        Button("Tap Count: \(tapCount)") {
            self.tapCount += 1
        }
    }
}
// ContentView is a struct, which might be created as a constant. If you think back to when you learned about structs, that means it’s immutable – we can’t change its values freely.
When creating struct methods that want to change properties, we need to add the mutating keyword: mutating func doSomeWork(), for example. However, Swift doesn’t let us make mutating computed properties, which means we can’t write mutating var body: some View – it just isn’t allowed.
---------------
struct ContentView: View {
    @State private var name = ""

    var body: some View {
        Form {
            TextField("Enter your name", text: $name)
            Text("Hello, world!")
        }
    }
}
//Notice how that uses name rather than $name? That’s because we don’t want a two-way binding here – we want to read the value, yes, but we don’t want to write it back somehow, because that text view won’t change.
So, when you see a dollar sign before a property name, remember that it creates a two-way binding: the value of the property is read, but also written.
------------------------
//
//  ContentView.swift
//  WeSplit
//
//  Created by Mennah on 30/09/2024.
//

import SwiftUI

// Main content view for the WeSplit app
struct ContentView: View {
    // Array of student names to display in the picker
    let stud = ["mennah", "mo", "maro"]
    
    // State property to hold the selected student's name
    @State private var selctionstudent = "pick"
    
    var body: some View {
        // NavigationStack to manage view hierarchy
        NavigationStack {
            // Form container to group the form elements
            Form {
                // Picker component for selecting a student from the array
                Picker("Select your student", selection: $selctionstudent) {
                    // Loop through the 'stud' array and display each student's name in the picker
                    ForEach(stud, id: \.self) {
                        // Display the student's name as a text element in the picker
                        Text($0)
                    }
                }
            }
        }
    }
}

// Preview for the ContentView to show the UI in Xcode's preview pane
#Preview {
    ContentView()
}
--------------------------------
//
//  ContentView.swift
//  WeSplit
//
//  Created by Mennah on 30/09/2024.
//

import SwiftUI

// Main content view for the WeSplit app
struct ContentView: View {
    // Array of student names to display in the picker
    let stud = ["mennah", "mo", "maro"]
    
    // State property to hold the selected student's name
    @State private var selctionstudent = "pick"
    
    var body: some View {
        // NavigationStack to manage view hierarchy
        NavigationStack {
            // Form container to group the form elements
            Form {
                // Picker component for selecting a student from the array
                Picker("Select your student", selection: $selctionstudent) {
                    // Loop through the 'stud' array and display each student's name in the picker
                    ForEach(stud, id: \.self) {
                        // Display the student's name  array as a text element in the picker
                        Text($0)
                    }
                }
            }
        }
    }
}

// Preview for the ContentView to show the UI in Xcode's preview pane
#Preview {
    ContentView()
}
-------
struct ContentView: View {
    @State private var checkAmount = 0.0
    @State private var numberOfPeople = 0
    @State private var tipPercentage = 0
    
    
    var body : some View{
        NavigationStack{
            Form {
                Section {
                     TextField("Amount", value: $checkAmount, format: .currency(code: Locale.current.currency?.identifier ?? "USD"))
                        .keyboardType(.decimalPad)
                    
                    Picker("Number of people", selection: $numberOfPeople) {
                        ForEach(2..<100) {
                            Text("\($0) people")
                        }
                        
                        
                    }
                    .pickerStyle(.navigationLink)
                }
            }
            .navigationTitle("mennah")
        }
    }
    
                          
}
#Preview {
    ContentView()
}
--------------------------------------
struct ContentView: View {
    var body: some View {
        VStack(spacing: 10) {
            Text("First")
                .font(.largeTitle)
                .padding()
                .foregroundStyle(.white)
                .background(.blue)
                .clipShape(.capsule)

            Text("Second")
                .font(.largeTitle)
                .padding()
                .foregroundStyle(.white)
                .background(.blue)
                .clipShape(.capsule)
        }
    }
}
The more effiect 

< Views as properties	 	Custom modifiers >
View composition
Paul Hudson     @twostraws    October 14th 2023


SwiftUI lets us break complex views down into smaller views without incurring much if any performance impact. This means that we can split up one large view into multiple smaller views, and SwiftUI takes care of reassembling them for us.

For example, in this view we have a particular way of styling text views – they have a large font, some padding, foreground and background colors, plus a capsule shape:

struct ContentView: View {
    var body: some View {
        VStack(spacing: 10) {
            Text("First")
                .font(.largeTitle)
                .padding()
                .foregroundStyle(.white)
                .background(.blue)
                .clipShape(.capsule)

            Text("Second")
                .font(.largeTitle)
                .padding()
                .foregroundStyle(.white)
                .background(.blue)
                .clipShape(.capsule)
        }
    }
}
Because those two text views are identical apart from their text, we can wrap them up in a new custom view, like this:

struct CapsuleText: View {
    var text: String

    var body: some View {
        Text(text)
            .font(.largeTitle)
            .padding()
            .foregroundStyle(.white)
            .background(.blue)
            .clipShape(.capsule)
    }
}
struct ContentView: View {
    var body: some View {
        VStack(spacing: 10) {
            CapsuleText(text: "First")
            CapsuleText(text: "Second")
        }
    }
}
------
customizing
VStack(spacing: 10) {
    CapsuleText(text: "First") 
        .foregroundStyle(.white)  // Custom color

    CapsuleText(text: "Second")
        .foregroundStyle(.yellow) // Different color
}
